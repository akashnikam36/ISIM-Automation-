package com.policy;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import java.io.FileInputStream;
import java.text.ParseException;

import com.CreateRoles.Role;
import com.ibm.itim.apps.policy.Entitlement;
import com.ibm.itim.apps.policy.ServiceTarget;
import com.ibm.itim.apps.policy.Membership;
import com.ibm.itim.ws.model.WSAccount;
import com.ibm.itim.ws.model.WSOrganizationalContainer;
import com.ibm.itim.ws.model.WSProvisioningPolicy;
import com.ibm.itim.ws.model.WSProvisioningPolicyEntitlement;
import com.ibm.itim.ws.model.WSProvisioningPolicyMembership;
import com.ibm.itim.ws.model.WSRequest;
import com.ibm.itim.ws.model.WSServiceTarget;
import com.ibm.itim.ws.model.WSSession;
import com.ibm.itim.ws.services.ArrayOfTns1WSProvisioningPolicyEntitlement;
import com.ibm.itim.ws.services.ArrayOfTns1WSProvisioningPolicyMembership;
import com.ibm.itim.ws.services.WSInvalidLoginException;
import com.ibm.itim.ws.services.WSLoginServiceException;
import com.ibm.itim.ws.services.WSOrganizationalContainerService;
import com.ibm.itim.ws.services.WSProvisioningPolicyService;
import com.ibm.itim.ws.services.WSSessionService;
import com.utilities.GenericWSClient;
import com.utilities.Utils;

public class ProvisioningPolicy extends GenericWSClient{

	private static final String principal = "itim manager";
	private static final String credential = "secret";
	private static final String ORG_CONTAINER_PROFILE_NAME = "Organization";
	static final String WS_CONFIG_FILE_ROLE = "Properties/StaticRole.properties";
	static final String WS_CONFIG_FILE_SERVICE = "Properties/Service_config.properties";
	static final String WS_CONFIG_FILE_POLICY = "Properties/Policy_config.properties";
	
	public void CREATEPOLICY() throws WSLoginServiceException, Exception{
		String orgUnitName="AmarAmara";
		
		
		WSSession session = loginIntoITIM(principal, credential);
		WSProvisioningPolicyService wsProvisioningPolicyService = getProvisioningPolicyService();
		
		String sDate = "28/03/2017";
		Date date = null;
		if (sDate != null) {
			try {
				date = Utils.convertStringToDate(sDate);
			} catch (ParseException e) {
				Utils
						.printMsg(
								ProvisioningPolicy.class
										.getName(),
								"CREATEPOLICY",
								"The date is not specified in the expected format. Expected format is MM/DD/YYYY");
				Utils.printMsg(ProvisioningPolicy.class
						.getName(), "CREATEPOLICY", this
						.getUsage(e.getLocalizedMessage()));
			}
		} else {
			date = new Date();
		}
		XMLGregorianCalendar xmlDate = Utils.long2Gregorian(date
				.getTime());
		WSOrganizationalContainerService wsOrgContainerService = getOrganizationalContainerService();
		List<WSOrganizationalContainer> lstWSOrganizationContainers = wsOrgContainerService
				.searchContainerByName(session, null,
						ORG_CONTAINER_PROFILE_NAME, orgUnitName);
		WSOrganizationalContainer parentWSOrgContainer = null;
		if (lstWSOrganizationContainers != null
				&& lstWSOrganizationContainers.size() > 0) {
			// We have found some organizational containers
			// Get the first container and proceed
			parentWSOrgContainer = lstWSOrganizationContainers.get(0);
			WSProvisioningPolicy policy = this.getProvisioningPolicy();
			WSRequest requestObj = wsProvisioningPolicyService
					.createPolicy(session, parentWSOrgContainer,
							policy, xmlDate);
			Utils.printMsg(ProvisioningPolicy.class
					.getName(), "CRATEPOLICY",
					"Request status: " + requestObj.getStatusString());
		} else {
			Utils
					.printMsg(ProvisioningPolicy.class
							.getName(), "CRATEPOLICY",
							"The parent organization unit passed in not valid.");
			//success = false;
		}

		//return success;

	}
	
	//--------------------------------------------------------------------------------------------------------------
	WSProvisioningPolicy getProvisioningPolicy() throws Exception {

		WSProvisioningPolicy pp = new WSProvisioningPolicy();
		pp.setName("Test Policy3");
		pp.setEnabled(false);
		pp.setPriority(1);

		ArrayOfTns1WSProvisioningPolicyEntitlement arrEntitlements = new ArrayOfTns1WSProvisioningPolicyEntitlement();

		WSProvisioningPolicyEntitlement entitlement = new WSProvisioningPolicyEntitlement();

		WSServiceTarget serviceTarget = new WSServiceTarget();
		
//		serviceTarget.setType(ServiceTarget.TYPE_SERVICE_TYPE);
//		serviceTarget.setName("WinLocalProfile");
		serviceTarget.setType(ServiceTarget.TYPE_SERVICE_NAME);
		
		//------LOAD FILE---
		java.util.Properties properties = new java.util.Properties();
		properties.load(new FileInputStream(WS_CONFIG_FILE_SERVICE));
		//System.out.println(properties.get(key));
		serviceTarget.setName("erglobalid=1506910683436932838,ou=services,erglobalid=1495910086984201917,ou=IBM,DC=COM");
		entitlement.setServiceTarget(serviceTarget);
		entitlement.setProcessDN(null);

		
		entitlement.setType(Entitlement.ENTITLEMENT_TYPE_AUTHORIZED);
		
		arrEntitlements.getItem().add(entitlement);
		pp.setEntitlements(arrEntitlements);

		ArrayOfTns1WSProvisioningPolicyMembership arrMemberships = new ArrayOfTns1WSProvisioningPolicyMembership();

		WSProvisioningPolicyMembership membership = new WSProvisioningPolicyMembership();
		//membership.setName("Employee");
		Role role=new Role();
		//role.LOOKUPROLE("AmarAmara", "Employee");
		//boolean rolename=role.LOOKUPROLE("AmarAmara", "Employee");
		//if(rolename==true){
			membership.setType(Membership.TYPE_ORGANIZATIONAL_ROLE);
			membership.setName("erglobalid=1498178463779964124,ou=roles,erglobalid=1495910086984201917,ou=IBM,DC=COM");
			//membership.setName("Employee");
				
		//}
		//membership.setType(Membership.TYPE_ORGANIZATIONAL_ROLE);

		arrMemberships.getItem().add(membership);
		pp.setMembership(arrMemberships);

		return pp;
	}

	
	//--------------------------------------------------------------------------------------------------------------
	private static WSSession loginIntoITIM(String principal2, String credential) throws Exception, WSLoginServiceException {
		WSSessionService proxy = getSessionService();
		WSSession session = proxy.login(principal, credential);
		return session;
	}
	@Override
	public boolean executeOperation(Map<String, Object> mpParams) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public String getUsage(String errMessage) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public static void main(String args[]) throws Exception{
		java.util.Properties properties = new java.util.Properties();
		try {
			properties.load(new FileInputStream(WS_CONFIG_FILE_POLICY));
			//properties.getClass().getResourceAsStream(WS_CONFIG_FILE);
			System.out.println();
		} catch (Exception e1) {
			System.out.println("Error occurred while reading ("+ WS_CONFIG_FILE_POLICY +")");
			e1.printStackTrace();
		}
		
		ProvisioningPolicy policy=new ProvisioningPolicy();
		policy.CREATEPOLICY();
		
		//--------------------------------------------------------------
		String policyNames[]=properties.getProperty("policyName").split(",");
		String roleMember[]=properties.getProperty("roleMember").split(",");
		String serviceName=properties.getProperty("serviceName").split(",");
	}

}
